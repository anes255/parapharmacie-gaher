// fix-admin-password.js - Force fix admin password issue
require('dotenv').config();
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

console.log('üîß Fixing admin password issue...');

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
})
.then(async () => {
    console.log('‚úÖ Connected to MongoDB');
    
    // Import the User model
    const User = require('./models/User');
    
    try {
        console.log('üîç Checking current admin user...');
        
        // First, completely delete the problematic admin user
        await User.deleteOne({ email: 'pharmaciegaher@gmail.com' });
        console.log('üóëÔ∏è Deleted existing admin user');
        
        // Create a strong password hash
        console.log('üîê Creating new password hash...');
        const salt = await bcrypt.genSalt(12); // Higher salt rounds for security
        const hashedPassword = await bcrypt.hash('anesaya75', salt);
        
        console.log('üìè Password hash length:', hashedPassword.length);
        console.log('üîê Hash starts with:', hashedPassword.substring(0, 10) + '...');
        
        // Create new admin user with explicit field setting
        const adminData = {
            nom: 'Gaher',
            prenom: 'Pharmacie',
            email: 'pharmaciegaher@gmail.com',
            telephone: '+213123456789',
            adresse: 'Tipaza, Alg√©rie',
            wilaya: 'Tipaza',
            password: hashedPassword,
            role: 'admin'
        };
        
        console.log('üë§ Creating new admin user...');
        const adminUser = new User(adminData);
        
        // Force save with password validation
        const savedAdmin = await adminUser.save();
        
        console.log('‚úÖ Admin user created successfully!');
        console.log('üìß Email:', savedAdmin.email);
        console.log('üëë Role:', savedAdmin.role);
        console.log('üÜî ID:', savedAdmin._id);
        
        // Verify the user was saved correctly by fetching it back
        console.log('üîç Verifying admin user...');
        const verifyAdmin = await User.findOne({ email: 'pharmaciegaher@gmail.com' }).select('+password');
        
        if (verifyAdmin) {
            console.log('‚úÖ Admin verification successful');
            console.log('üìß Found email:', verifyAdmin.email);
            console.log('üëë Role:', verifyAdmin.role);
            console.log('üîê Password hash exists:', !!verifyAdmin.password);
            console.log('üìè Password hash length:', verifyAdmin.password ? verifyAdmin.password.length : 0);
            
            // Test password verification
            if (verifyAdmin.password) {
                const isValid = await bcrypt.compare('anesaya75', verifyAdmin.password);
                console.log('üîì Password verification test:', isValid ? 'PASS' : 'FAIL');
                
                if (isValid) {
                    console.log('üéâ SUCCESS! Admin user is fully functional');
                    console.log('üìã Login credentials:');
                    console.log('   Email: pharmaciegaher@gmail.com');
                    console.log('   Password: anesaya75');
                } else {
                    console.log('‚ùå ERROR: Password verification failed');
                }
            } else {
                console.log('‚ùå ERROR: No password hash found after creation');
            }
        } else {
            console.log('‚ùå ERROR: Could not find admin user after creation');
        }
        
        // Also create a test user for testing
        console.log('üë• Creating test user...');
        const testPassword = await bcrypt.hash('test123', salt);
        const testUser = new User({
            nom: 'Test',
            prenom: 'User',
            email: 'test@example.com',
            telephone: '+213987654321',
            adresse: 'Test Address, Alg√©rie',
            wilaya: 'Alger',
            password: testPassword,
            role: 'user'
        });
        
        await testUser.save();
        console.log('‚úÖ Test user created');
        console.log('üìß Test login: test@example.com / test123');
        
        console.log('\nüéØ SUMMARY:');
        console.log('‚úÖ Admin user: pharmaciegaher@gmail.com / anesaya75');
        console.log('‚úÖ Test user: test@example.com / test123');
        console.log('‚úÖ Both users have properly hashed passwords');
        console.log('\nüöÄ You can now login to the admin panel!');
        
    } catch (error) {
        console.error('‚ùå Error fixing admin:', error);
        console.error('Stack trace:', error.stack);
    }
    
    mongoose.disconnect();
    console.log('üëã Disconnected from MongoDB');
})
.catch(err => {
    console.error('‚ùå MongoDB connection error:', err);
    process.exit(1);
});